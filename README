1. Проектирование базы данных:
1.1. Выбор СУБД:
1.1.1. Реляционная (PostgreSQL, MySQL) или документная (MongoDB).
1.2. Проектирование структуры:
1.2.1. Определить необходимые сущности и связи между ними (пример: таблицы
users, posts, comments и т.п.).
1.2.2. Включить поля, необходимые для авторизации (логин, пароль (хэш), email и
пр.).
1.3. Подготовить схему БД.
2. Реализация REST API:
2.1. Создание серверной части (на выбор: Python (Flask/FastAPI/Django), Node.js
(Express/Nest), C++ (Crow/Pistache):
2.1.1. Реализовать роуты/эндпоинты для CRUD-операций с основными
сущностями.
2.1.2. Для каждого эндпоинта указать методы (GET, POST, PUT, DELETE) и
возвращаемые HTTP-статусы (2xx, 4xx, 5xx).
2.1.3. Продумать структуры данных для запросов и ответов (JSON –
предпочтительно, можно упомянуть XML при необходимости).
2.2. Аутентификация и авторизация:
2.2.1. Реализовать регистрацию и вход пользователя с проверкой логина/пароля.
2.2.2. Сгенерировать JWT-токен при успешном входе.
2.2.3. Запрашивать токен при обращении к защищенным ресурсам (например,
личный профиль, добавление контента).
2.2.4. Предусмотреть обновление или валидацию токена.
2.3. Обработка ошибок:
2.3.1. Возвращать корректные HTTP-статусы и человекочитаемые сообщения об
ошибках.
2.3.2. Логировать ошибки на сервере.
3. Создание SPA-приложения:
3.1. Выбор фреймворка для фронтенда (React, Vue, Angular и т.д.):
3.1.1. Создать SPA с системой роутинга (например, /login, /register, /dashboard,
/profile, и т.п.).
3.1.2. Реализовать загрузку данных через Fetch/Axios с использованием созданного
API.
3.2. Интеграция аутентификации:
3.2.1. Форма входа/регистрации.
3.2.2. При успешной авторизации сохранять токен (в localStorage или куки – с
учетом безопасности).
3.2.3. Обрабатывать редиректы в случае, если доступ к защищенному роуту
пытается получить неавторизованный пользователь.
3.3. Работа с данными:
3.3.1. Отображение списков, их деталей.
3.3.2. Добавление, изменение, удаление сущностей через вызовы API.
3.3.3. Пагинация и фильтрация.
3.4. Обработка ошибок:
3.4.1. При получении ошибок с сервера отображать уведомления (toast, alert или
отдельный компонент) с информацией о проблеме.
3.4.2. Реализовать логику перехвата 401 Unauthorized, 403 Forbidden.
4. Безопасность:
4.1. JWT и защита токенов:
4.1.1. Безопасное хранение: сравнить хранение в localStorage и httpOnly cookies,
описать риски.
4.1.2. Механизмы продления сессии.
4.2. Защита от CSRF/XSS:
4.2.1. Кратко описать, как снизить риски XSS.
4.2.2. Если используется токен в куки, проверить, используется ли флажок
httpOnly и SameSite.
4.3. Шифрование и хеширование паролей:
4.3.1. Использовать надежную библиотеку (bcrypt, Argon2 и т.д.) для хранения
паролей.
5. Деплой и финальная интеграция:
5.1. Деплой:
5.1.1. Запуск сервера и фронтенда локально или в Docker-контейнере.
5.2. Настройка CI/CD:
5.2.1. Настроить автоматический запуск тестов при пуше.
5.3. Проверка работоспособности:
5.3.1. Демонстрация основных сценариев в браузере.
5.3.2. Скриншоты работы приложения.
